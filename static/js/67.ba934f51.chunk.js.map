{"version":3,"file":"static/js/67.ba934f51.chunk.js","mappings":"+MAKMA,EAAUC,EAAAA,GAAAA,IAAH,+cAwIb,UA7G2B,WACzB,IAAQC,GAAcC,EAAAA,EAAAA,KAAdD,UACFE,GAAWC,EAAAA,EAAAA,MA2BjB,OACE,UAACL,EAAD,YACE,sDACA,UAAC,IAAD,CACEM,KAAK,QACLC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,cAAe,CAAEC,UAAU,GAC3BC,SAjCW,SAACC,GAChBC,QAAQC,IAAI,WAAYF,GACxBX,EAAUc,YAAYH,EAAOI,UAC7Bf,EAAUgB,YAAYL,EAAOM,UAC7BjB,EAAUkB,WAAWC,MACnB,SAACC,GACCR,QAAQC,IAAIO,GACZR,QAAQC,IAAI,4BACZX,EAAS,QAEX,SAACmB,GACkB,MAAbA,EAAIC,KACNC,EAAAA,GAAAA,MAAc,qFAEdX,QAAQC,IAAI,4BACZD,QAAQY,IAAIH,QAmBdI,eAbiB,SAACC,GACtBd,QAAQC,IAAI,UAAWa,IAanBC,aAAa,MAPf,WASE,SAAC,SAAD,CACEC,MAAM,qBACNxB,KAAK,WACLyB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,yCAC3B,iBAAO,CACLQ,UADK,SACKC,GAAgB,IAAbC,EAAY,uDAAJ,GACnB,MAAI,KAAKC,KAAKD,GACLE,QAAQC,OAAO,4EACpBH,EAAMI,OAAS,GAAWF,QAAQC,OAAO,oCACzCH,EAAMI,OAAS,EAAUF,QAAQC,OAAO,mCACrCD,QAAQG,cAXvB,UAgBE,SAAC,IAAD,OAGF,SAAC,SAAD,CACEV,MAAM,eACNxB,KAAK,WACLyB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,mCAC3B,CACEgB,IAAK,EACLhB,QAAS,mCAEX,CACEiB,IAAK,GACLjB,QAAS,qCAXf,UAeE,SAAC,aAAD,OAGF,SAAC,SAAD,CACEK,MAAM,2BACNxB,KAAK,kBACLyB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,+CAC3B,gBAAGkB,EAAH,EAAGA,cAAH,MAAwB,CACtBV,UADsB,SACZC,GAAgB,IAAbC,EAAY,uDAAJ,GACnB,OAAKA,GAASQ,EAAc,cAAgBR,EAGrCE,QAAQC,OAAO,IAAIM,MAAM,4DAFvBP,QAAQG,cARzB,UAeE,SAAC,aAAD,OAGF,SAAC,SAAD,CAAW/B,WAAY,CAAED,KAAM,IAA/B,UACE,SAAC,IAAD,CAAQqC,KAAK,UAAUC,SAAS,SAAhC,gCAKJ,iBAAKC,MAAO,CAAEC,UAAW,UAAzB,kDACQ,SAAC,KAAD,CAAMC,GAAG,SAAT","sources":["pages/Register.tsx"],"sourcesContent":["import { Form, Input, Button, message } from 'antd'\nimport { Link, useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useStore } from '../store'\n\nconst Wrapper = styled.div`\n  max-width: 270px;\n  margin: 50px auto;\n  padding: 20px 20px;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0 rgba(0, 0, 0, 0.2);\n\n  .ant-form-item {\n    margin-bottom: 16px;\n  }\n\n  @media (min-width: 576px) {\n    max-width: 480px;\n    padding: 20px 50px;\n  }\n\n  .ant-form-item-control-input-content {\n    display: flex;\n    justify-content: center;\n  }\n\n  > h2 {\n    text-align: center;\n    padding: 8px 0;\n  }\n`\n\nconst Register: React.FC = () => {\n  const { AuthStore } = useStore()\n  const navigate = useNavigate()\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values)\n    AuthStore.setUsername(values.username)\n    AuthStore.setPassword(values.password)\n    AuthStore.register().then(\n      (user) => {\n        console.log(user)\n        console.log('注册成功')\n        navigate('/')\n      },\n      (err) => {\n        if (err.code === 202) {\n          message.error('该用户名已被使用, 请换一个吧')\n        } else {\n          console.log('注册失败')\n          console.dir(err)\n        }\n      }\n    )\n  }\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo)\n  }\n\n  return (\n    <Wrapper>\n      <h2>用户注册</h2>\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 5 }}\n        wrapperCol={{ span: 19 }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"username\"\n          rules={[\n            { required: true, message: '请输入用户名!' },\n            () => ({\n              validator(_, value = '') {\n                if (/\\W/.test(value))\n                  return Promise.reject('只能由字母数字下划线组成')\n                if (value.length > 10) return Promise.reject('最多10个字符')\n                if (value.length < 3) return Promise.reject('最少3个字符')\n                return Promise.resolve()\n              },\n            }),\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            { required: true, message: '请输入密码!' },\n            {\n              min: 4,\n              message: '最少4个字符',\n            },\n            {\n              max: 16,\n              message: '最多16个字符',\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item\n          label=\"确认密码\"\n          name=\"ConfirmPassword\"\n          rules={[\n            { required: true, message: '请输入确认密码!' },\n            ({ getFieldValue }) => ({\n              validator(_, value = '') {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve()\n                }\n                return Promise.reject(new Error('两次密码输入不一致!'))\n              },\n            }),\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ span: 24 }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            注册\n          </Button>\n        </Form.Item>\n      </Form>\n      <div style={{ textAlign: 'center' }}>\n        已有账号？去<Link to=\"/login\">登录</Link>\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default Register\n"],"names":["Wrapper","styled","AuthStore","useStore","navigate","useNavigate","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","setUsername","username","setPassword","password","register","then","user","err","code","message","dir","onFinishFailed","errorInfo","autoComplete","label","rules","required","validator","_","value","test","Promise","reject","length","resolve","min","max","getFieldValue","Error","type","htmlType","style","textAlign","to"],"sourceRoot":""}