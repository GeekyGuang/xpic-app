{"version":3,"file":"static/js/326.f0751edc.chunk.js","mappings":"2NASMA,EAAWC,EAAAA,GAAAA,IAAH,gjBAoCRC,GAAoBC,EAAAA,EAAAA,KAAS,WACjC,IAAQC,GAAiBC,EAAAA,EAAAA,KAAjBD,aACFE,GAAWC,EAAAA,EAAAA,QAA2B,IAKtCC,EAAW,WACfC,QAAQC,IAAI,YACZN,EAAaO,OAaf,OAVAC,EAAAA,EAAAA,YAAU,WACRH,QAAQC,IAAI,QACZD,QAAQC,IAAIJ,EAASO,WACpB,CAACP,EAASO,WAEbD,EAAAA,EAAAA,YAAU,WAER,OADAJ,IACO,kBAAMJ,EAAaU,kBACzB,KAGD,8BACGV,EAAaW,MACZ,SAAC,IAAD,CACEC,WAAYZ,EAAaW,KAAKE,OAC9BC,KAAMV,EACNW,QAAQ,SAAC,IAAD,IACRC,SAAUhB,EAAaiB,WAAajB,EAAagB,QACjDE,WAAY,GALd,UAOE,SAAC,KAAD,CACEC,WAAYnB,EAAaW,KAEzBS,WAAY,SAACC,EAAWC,GAAZ,OACVD,GACE,SAAC,UAAD,WACE,UAACzB,EAAD,YACE,0BACE,gBAAK2B,IAAKF,EAAKG,WAAWC,IAAID,WAAWC,SAE3C,iBAAKC,UAAU,OAAf,WACE,wBAAKL,EAAKG,WAAWG,YACrB,kBACEC,KAAK,OACLC,MAAOR,EAAKG,WAAWC,IAAID,WAAWC,IACtCK,UAAQ,EACRC,IAAK,SAACC,GACAA,IAAK9B,EAASO,QAAQa,GAAKU,OAGnC,iBAAKN,UAAU,UAAf,WACE,SAAC,IAAD,CACEE,KAAK,UACLK,KAAK,QACLC,QAAS,YACPC,EAAAA,EAAAA,IAAWjC,EAASO,QAAQa,KAJhC,2BASA,SAAC,IAAD,CAAQM,KAAK,UAAUK,KAAK,QAA5B,UACE,cACEG,OAAO,SACPC,KAAMhB,EAAKG,WAAWC,IAAID,WAAWC,IACrCa,IAAI,aAHN,6BAQF,SAAC,IAAD,CACEV,KAAK,UACLK,KAAK,QACLM,QAAM,EACNL,QAAS,WACPlC,EAAawC,OAAOnB,EAAKG,WAAWC,IAAIgB,GAAInB,IALhD,oCAlCQD,EAAKoB,IAiDrB,SAMR,SAAC,IAAD,SAMR","sources":["pages/History.tsx"],"sourcesContent":["import { Button, Divider, List } from 'antd'\nimport { observer } from 'mobx-react'\nimport { useStore } from '../store'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { createRef, MutableRefObject, useEffect, useRef } from 'react'\nimport Loading from '../components/Loading'\nimport styled from 'styled-components'\nimport { handleCopy } from '../models'\n\nconst ListItem = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  width: 100%;\n  gap: 8px;\n\n  img {\n    width: 100px;\n    height: 100px;\n    object-fit: cover;\n  }\n\n  .info {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    flex: 1;\n    input {\n      margin-top: 4px;\n      border: 1px solid #d9d9d9;\n      width: 100%;\n      padding: 4px;\n\n      &:focus {\n        outline: none;\n      }\n    }\n\n    .buttons {\n      display: flex;\n      justify-content: flex-end;\n    }\n  }\n`\n\nconst History: React.FC = observer(() => {\n  const { HistoryStore } = useStore()\n  const inputRef = useRef<HTMLInputElement[]>([])\n  // inputRef.current = HistoryStore.list.map(\n  //   (element, i) => inputRef.current[i] ?? createRef()\n  // )\n\n  const loadMore = () => {\n    console.log('loadmore')\n    HistoryStore.get()\n  }\n\n  useEffect(() => {\n    console.log('refs')\n    console.log(inputRef.current)\n  }, [inputRef.current])\n\n  useEffect(() => {\n    loadMore()\n    return () => HistoryStore.resetHistory()\n  }, [])\n\n  return (\n    <>\n      {HistoryStore.list ? (\n        <InfiniteScroll\n          dataLength={HistoryStore.list.length}\n          next={loadMore}\n          loader={<Loading />}\n          hasMore={!HistoryStore.isLoading && HistoryStore.hasMore}\n          endMessage={''}\n        >\n          <List\n            dataSource={HistoryStore.list}\n            //@ts-ignore\n            renderItem={(item: any, i) =>\n              item ? (\n                <List.Item key={item.id}>\n                  <ListItem>\n                    <div>\n                      <img src={item.attributes.url.attributes.url} />\n                    </div>\n                    <div className=\"info\">\n                      <h5>{item.attributes.filename}</h5>\n                      <input\n                        type=\"text\"\n                        value={item.attributes.url.attributes.url}\n                        readOnly\n                        ref={(dom) => {\n                          if (dom) inputRef.current[i] = dom\n                        }}\n                      />\n                      <div className=\"buttons\">\n                        <Button\n                          type=\"default\"\n                          size=\"small\"\n                          onClick={() => {\n                            handleCopy(inputRef.current[i])\n                          }}\n                        >\n                          复制\n                        </Button>\n                        <Button type=\"default\" size=\"small\">\n                          <a\n                            target=\"_blank\"\n                            href={item.attributes.url.attributes.url}\n                            rel=\"noreferrer\"\n                          >\n                            打开\n                          </a>\n                        </Button>\n                        <Button\n                          type=\"primary\"\n                          size=\"small\"\n                          danger\n                          onClick={() => {\n                            HistoryStore.delete(item.attributes.url.id, i)\n                          }}\n                        >\n                          删除\n                        </Button>\n                      </div>\n                    </div>\n                  </ListItem>\n                </List.Item>\n              ) : (\n                ''\n              )\n            }\n          ></List>\n        </InfiniteScroll>\n      ) : (\n        <Loading />\n      )}\n    </>\n  )\n})\n\nexport default History\n"],"names":["ListItem","styled","History","observer","HistoryStore","useStore","inputRef","useRef","loadMore","console","log","get","useEffect","current","resetHistory","list","dataLength","length","next","loader","hasMore","isLoading","endMessage","dataSource","renderItem","item","i","src","attributes","url","className","filename","type","value","readOnly","ref","dom","size","onClick","handleCopy","target","href","rel","danger","delete","id"],"sourceRoot":""}